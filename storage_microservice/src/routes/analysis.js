import { Router } from "express";

import * as analysisController from "@/controllers/analysis"

const router = Router();

router.route("/pausingTxSummary")
    .get(analysisController.analyzePausingTx);

router.route("/reportSummaryAll")
    .get(analysisController.getAllReportSummary);

router.route("/reportSummary/:id")
    .get(analysisController.getReportSummaryById);

router.route("/reportSummary")
    .get(analysisController.getReportSummaryByQuery);

router.route("/vulnerabilitiesAll")
    .get(analysisController.getAllVulnerabilities);

router.route("/vulnerabilities/:id")
    .get(analysisController.getVulnerabilityById)
    .put(analysisController.updateVulnerability);

router.route("/vulnerabilities")
    .get(analysisController.getVulnerabilityByQuery);



export default router;

/**
 * @swagger
 * tags:
 *   - name: analysis
 *     description: Analysis API
 * components:
 *   schemas:
 *     ReportSummary:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *           description: The name of the report
 *         description:
 *           type: string
 *           description: The description of the report
 *         lines:
 *           type: integer
 *           description: The number of lines in the report
 *         optimizationIssues:
 *           type: integer
 *           description: The number of optimization issues in the report
 *         informationalIssues:
 *           type: integer
 *           description: The number of informational issues in the report
 *         lowIssues:
 *           type: integer
 *           description: The number of low issues in the report
 *         mediumIssues:
 *           type: integer
 *           description: The number of medium issues in the report
 *         highIssues:
 *           type: integer
 *           description: The number of high issues in the report
 *       required:
 *         - name
 *         - description
 *         - lines
 *     Vulnerability:
 *       type: object
 *       properties:
 *         detectorId:
 *           type: string
 *           description: The id of the detector
 *         description:
 *           type: string
 *           description: The description of the vulnerability
 *         check:
 *           type: string
 *           description: The check that detected the vulnerability
 *         impact:
 *           type: string
 *           description: The impact of the vulnerability
 *         confidence:
 *           type: string
 *           description: The confidence of the vulnerability
 *         imapctLine:
 *           type: string
 *           description: The line of code where the vulnerability was detected
 *         status:
 *           type: string
 *           description: The status of the vulnerability
 *         remarks:
 *           type: string
 *           description: The remarks about the vulnerability
 *       required:
 *         - detectorId
 *         - description
 *         - check
 *         - impact
 *         - confidence
 *         - imapctLine
 * paths:
 *  /analysis/pausingTxSummary:
 *    get:
 *      summary: Get analysis report on the effectiveness of pausing mechanism
 *      tags: 
 *        - analysis
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                type: object
 *                properties:
 *                  totalPausingEvents:
 *                    type: integer
 *                    description: The total number of pausing events
 *                  successfulPausingEvents:
 *                    type: integer
 *                    description: The number of successful pausing events
 *                  failedPausingEvents:
 *                    type: integer
 *                    description: The number of failed pausing events
 *                  successRate:
 *                    type: number
 *                    format: float
 *                    description: The success rate of the pausing mechanism
 *  /analysis/reportSummaryAll:
 *    get:
 *      summary: Get all report summaries
 *      tags: 
 *        - analysis
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                type: array
 *                items:
 *                  $ref: '#/components/schemas/ReportSummary'
 *  /analysis/reportSummary/{id}:
 *    get:
 *      summary: Get report summary by id
 *      tags:
 *        - analysis
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *            type: string
 *          required: true
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/ReportSummary'
 *        404:
 *          description: Not found
 *  /analysis/reportSummary:
 *    get:
 *      summary: Get report summary by query parameter 
 *      tags:
 *        - analysis
 *      parameters:
 *        - in: query
 *          name: reportId
 *          schema:
 *            type: string
 *          required: false
 *        - in: query
 *          name: name
 *          schema:
 *            type: string
 *          required: false
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                type: array
 *                items:
 *                  $ref: '#/components/schemas/ReportSummary'
 *        404:
 *          description: Not found
 *  /analysis/vulnerabilitiesAll:
 *    get:
 *      summary: Get all vulnerabilities
 *      tags: 
 *        - analysis
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                type: array
 *                items:
 *                  $ref: '#/components/schemas/Vulnerability'
 *  /analysis/vulnerabilities/{id}:
 *    get:
 *      summary: Get vulnerability by id
 *      tags:
 *        - analysis
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *            type: string
 *          required: true
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/Vulnerability'
 *        404:
 *          description: Not found
 *    put:
 *      summary: Update vulnerability by id
 *      tags:
 *        - analysis
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *            type: string
 *          required: true
 *      requestBody:
 *        required: true
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  example: "resolved"
 *                remarks:
 *                  type: string
 *                  example: "Vulnerability fixed"
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/Vulnerability'
 *        404:
 *          description: Not found
 *  /analysis/vulnerabilities:
 *    get:
 *      summary: Get vulnerabilities by query parameter 
 *      tags:
 *        - analysis
 *      parameters:
 *        - in: query
 *          name: reportId
 *          schema:
 *            type: string
 *          required: false
 *        - in: query
 *          name: impact
 *          schema:
 *            type: string
 *          required: false
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                type: array
 *                items:
 *                  $ref: '#/components/schemas/Vulnerability'
 *        404:
 *          description: Not found
 * 
 */