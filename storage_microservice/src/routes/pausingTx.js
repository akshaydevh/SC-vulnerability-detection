import { Router } from "express";

import * as pauseTxController from "@/controllers/pausingTx";
import * as pauseTxValidation from "@/routes/validation/pausingTx";
import { validate } from "@/middleware";

const router = Router();

router.route("/")
    .get(pauseTxController.getAllPausingTx)
    .post(validate(pauseTxValidation.createPausingTxRules), pauseTxController.createPausingTx);

router.route("/:id")
    .get(validate(pauseTxValidation.getgetPausingTxByIdRules), pauseTxController.getPausingTxById)
    .put(validate(pauseTxValidation.updatePausingTxRules), pauseTxController.updatePausingTx)
//.delete(validate(pauseTxValidation.deletePausingTxRules), pauseTxController.deletePausingTx); // DISABLED FOR NOW 

export default router;

/**
 * @swagger
 * components:
 *   schemas:
 *     PausingTx:
 *       type: object
 *       properties:
 *         attackTxId:
 *           type: string
 *           description: The attack transaction id
 *         blockNumber:
 *           type: string
 *           description: The block number where the attack happened
 *         attacker:
 *           type: string
 *           description: The attacker address
 *         status:
 *           type: string
 *           description: The status of the pausing transaction
 *         firstRunTxId:
 *           type: string
 *           description: The first run transaction id
 *         success:
 *           type: boolean
 *           description: Whether the pausing transaction was successful
 *       required:
 *         - attackTxId
 *         - attacker
 * paths:
 *  /pausingTx:
 *    get:
 *      summary: Get all pausingTx
 *      tags: 
 *        - pauseTx
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                type: array
 *                items:
 *                  $ref: '#/components/schemas/PausingTx'
 *    post:
 *      summary: Create new pausingTx
 *      tags:
 *        - pauseTx
 *      requestBody:
 *        required: true
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                attacker:
 *                  type: string
 *                  example: "0x7Ad8175642862469ea5456453842f44521"
 *                attackTxId:
 *                  type: string
 *                  example: "0x5Ad87424108941140036851232564561674541d545514175642862469ea5456453842f44521"
 *      responses:
 *        201:
 *          description: Created
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/PausingTx'
 *        422:
 *          description: Validation failed
 *  /pausingTx/{id}:
 *    get:
 *      summary: Get pausingTx by id
 *      tags:
 *        - pauseTx
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *            type: string
 *          required: true
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/PausingTx'
 *        404:
 *          description: Not found
 *    put:
 *      summary: Update pausingTx by id
 *      tags:
 *        - pauseTx
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *            type: string
 *          required: true
 *      requestBody:
 *        required: true
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/PausingTx'
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/PausingTx'
 *        404:
 *          description: Not found
 */