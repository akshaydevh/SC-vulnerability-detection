import { Router } from "express";
import multer from "multer";
import * as reportController from "@/controllers/reports";
import * as reportValidation from "@/routes/validation/report";
import { validate } from "@/middleware";

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'public/reports');
    },
    filename: (req, file, cb) => {
        cb(null, file.originalname);
    }
});

const upload = multer({ storage: storage });

const router = Router();

router.route("/")
    .get(reportController.getAllReports)
    .post(upload.single('file'), validate(reportValidation.createReportRules), reportController.createReport);

router.route("/:id")
    .get(validate(reportValidation.getReportByIdRules), reportController.getReportById)
    .delete(validate(reportValidation.deleteReportRules), reportController.deleteReport);

export default router;

/**
 * @swagger
 * components:
 *   schemas:
 *     Report:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *           description: The name of the report
 *         description:
 *           type: string
 *           description: The description of the report
 *         extension:
 *           type: string
 *           description: The extension of the report
 *         url:
 *           type: string
 *           description: The url of the report
 *         path:
 *           type: string
 *           description: The path of the report
 *         size:
 *           type: string
 *           description: The size of the report
 *       required:
 *         - name
 *         - extension
 *         - url
 *         - path
 *         - size
 * paths:
 *  /reports:
 *    get:
 *      summary: Get all reports
 *      tags: 
 *        - report
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                type: array
 *                items:
 *                  $ref: '#/components/schemas/Report'
 *    post:
 *      summary: Upload new report
 *      tags:
 *        - report
 *      requestBody:
 *        required: true
 *        content:
 *          multipart/form-data:
 *            schema:
 *              type: object
 *              properties:
 *                file:
 *                  type: string
 *                  format: binary
 *                  description: The report file
 *                description:
 *                  type: string
 *                  description: The description of the report
 *      responses:
 *        201:
 *          description: Created
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/Report'
 *        422:
 *          description: Validation failed
 *  /reports/{id}:
 *    get:
 *      summary: Get report by id
 *      tags:
 *        - report
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *            type: string
 *          required: true
 *      responses:
 *        200:
 *          description: Success
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/Report'
 *        404:
 *          description: Not found
 *    delete:
 *      summary: Delete report by id
 *      tags:
 *        - report
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *            type: string
 *          required: true
 *      responses:
 *        200:
 *          description: Success
 *        404:
 *          description: Not found
 * 
 */