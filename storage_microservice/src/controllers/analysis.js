import pausingTx from "@/db/models/pausingTx";
import reportSummary from "@/db/models/reportSummary";
import vulnerabilities from "@/db/models/vulnerabilities";
import createError from "http-errors";


/**
 * 
 * Get /pausingTx
 * Provides analysis report on the effectiveness of pausing mechanism
 */
export const analyzePausingTx = async (req, res, next) => {
    try {
        // count toatl pausing event
        const totalCount = await pausingTx.countDocuments();
        // count successful pausing event
        const successCount = await pausingTx.countDocuments({ success: true });
        // count failed pausing event
        const failedCount = totalCount - successCount;
        // calculate success rate
        const successRate = (successCount / totalCount) * 100;
        res.status(200).json({
            "totalPausingEvents": totalCount,
            "successfulPausingEvents": successCount,
            "failedPausingEvents": failedCount,
            "successRate": successRate
        });
    } catch (error) {
        return next(error);
    }
}


/**
 * Get /reportSummary
 * Provides list of all report summaries
 */
export const getAllReportSummary = async (req, res, next) => {
    try {
        const reportSummaryData = await reportSummary.find();
        res.status(200).json(reportSummaryData);
    } catch (error) {
        return next(error);
    }
}

/**
 * Get /reportSummary/:id
 * Provides report summary by id
 */
export const getReportSummaryById = async (req, res, next) => {
    try {
        const reportSummaryData = await reportSummary.findById(req.params.id);
        if (!reportSummaryData) {
            return next(createError("Report summary not found"));
        }
        res.json(reportSummaryData);
    } catch (error) {
        return next(error);
    }
}

/**
 * Get /reportSummary
 * Provides report summary by query parameter 
 * reportId or name
 */
export const getReportSummaryByQuery = async (req, res, next) => {
    try {
        const { reportId, name } = req.query;
        let queryObj = {};
        if (reportId) {
            queryObj.reportId = reportId;
        }
        if (name) {
            queryObj.name = name;
        }
        const reportSummaryData = await reportSummary.find(queryObj);
        if (!reportSummaryData) {
            return next(createError("Report summary not found"));
        }
        res.json(reportSummaryData);
    } catch (error) {
        return next(error);
    }
}


/**
 * Get /vulnerabilities
 * Provides list of all vulnerabilities
 */
export const getAllVulnerabilities = async (req, res, next) => {
    try {
        const vulnerabilitiesData = await vulnerabilities.find();
        res.status(200).json(vulnerabilitiesData);
    } catch (error) {
        return next(error);
    }
}

/**
 * Get /vulnerabilities/:id
 * Provides vulnerability by id
 */
export const getVulnerabilityById = async (req, res, next) => {
    try {
        const vulnerabilitiesData = await vulnerabilities.findById(req.params.id);
        if (!vulnerabilitiesData) {
            return next(createError("Vulnerability not found"));
        }
        res.json(vulnerabilitiesData);
    } catch (error) {
        return next(error);
    }
}

/**
 * Get /vulnerabilities 
 * Provides vulnerabilities by query parameters
 * reportId or impact
 */
export const getVulnerabilityByQuery = async (req, res, next) => {
    try {
        const { reportId, impact } = req.query;
        let queryObj = {};
        if (reportId) {
            queryObj.reportId = reportId;
        }
        if (impact) {
            queryObj.impact = impact;
        }
        const vulnerabilitiesData = await vulnerabilities.find(queryObj);
        if (!vulnerabilitiesData) {
            return next(createError("Vulnerability not found"));
        }
        res.json(vulnerabilitiesData);
    } catch (error) {
        return next(error);
    }
}


/**
 * PUT /vulnerabilities/:id
 * Update vulnerability by id
 */
export const updateVulnerability = async (req, res, next) => {
    try {
        const { status, remarks } = req.body;
        let updateBody = {};
        if (status) {
            updateBody.status = status;
        }
        if (remarks) {
            updateBody.remarks = remarks;
        }
        const vulnerabilitiesData = await vulnerabilities.findByIdAndUpdate(req.params.id, updateBody, { new: true });
        if (!vulnerabilitiesData) {
            return next(createError("Vulnerability not found"));
        }
        res.json(vulnerabilitiesData);
    } catch (error) {
        return next(error);
    }
}
