import pausingTx from "@/db/models/pausingTx";
import createError from "http-errors";

/**
 * POST /pausingTx
 * Create new pausingTx
 */
export const createPausingTx = async (req, res, next) => {
    try {
        const { attacker, attackTxId } = req.body;
        const pauseTxData = new pausingTx({ attacker, attackTxId });
        await pauseTxData.save();
        res.status(201).json(pauseTxData);
    } catch (error) {
        return next(createError("PausingTx creation failed"));
    }
}

/**
 * GET /pausingTx
 * Get all pausingTx
 */
export const getAllPausingTx = async (req, res, next) => {
    try {
        const pauseTxData = await pausingTx.find();
        res.status(201).json(pauseTxData);
    } catch (error) {
        return next(error);
    }
}

/**
 * GET /pausingTx/:id
 * Get pausingTx by id
 */
export const getPausingTxById = async (req, res, next) => {
    try {
        const pausingTxData = await pausingTx.findById(req.params.id);
        if (!pausingTxData) {
            return next(createError("PausingTx not found"));
        }
        res.json(pausingTxData);
    } catch (error) {
        console.log(error);
        return next(error);
    }
}

/**
 * PUT /pausingTx/:id
 * Update pausingTx by id
 */
export const updatePausingTx = async (req, res, next) => {
    try {
        const { blockNumber, status, firstRunTxId, success } = req.body;
        let updateBody = {};
        if (blockNumber) {
            updateBody.blockNumber = blockNumber;
        }
        if (status) {
            updateBody.status = status;
        }
        if (firstRunTxId) {
            updateBody.firstRunTxId = firstRunTxId;
        }
        if (success != null && success != undefined) {
            updateBody.success = success;
        }
        const pausingTxData = await pausingTx.findByIdAndUpdate(req.params.id, updateBody, { new: true });
        if (!pausingTxData) {
            return next(createError("PausingTx not found"));
        }
        res.json(pausingTxData);
    } catch (error) {
        return next(error);
    }
}

/**
 * PUT /pausingTx/attackTx/:attackTxId
 * Update pausingTx with attackTxId
 */
export const updatePausingTxByAttackTxId = async (req, res, next) => {
    try {
        const { blockNumber, status, firstRunTxId, success } = req.body;
        let updateBody = {};
        if (blockNumber) {
            updateBody.blockNumber = blockNumber;
        }
        if (status) {
            updateBody.status = status;
        }
        if (firstRunTxId) {
            updateBody.firstRunTxId = firstRunTxId;
        }
        if (success != null && success != undefined) {
            updateBody.success = success;
        }
        const pausingTxData = await pausingTx.findOneAndUpdate({ attackTxId: req.params.attackTxId }, updateBody, { new: true });
        if (!pausingTx) {
            return next(createError("PausingTx not found"));
        }
        res.json(pausingTxData);
    } catch (error) {
        return next(error);
    }
}


/**
 * DELETE /pausingTx/:id
 * Delete pausingTx by id
 */
export const deletePausingTx = async (req, res, next) => {
    try {
        const pausingTx = await pausingTx.findByIdAndDelete(req.params.id);
        if (!pausingTx) {
            return res.status(404).json({ message: 'PausingTx not found' });
        }
        res.json({ message: 'PausingTx deleted successfully' });
    } catch (error) {
        return next(error);
    }
}
